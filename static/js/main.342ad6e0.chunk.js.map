{"version":3,"sources":["Componenet/SearchPhotos.jsx","App.js","serviceWorker.js","index.js"],"names":["unsplash","Unsplash","accessKey","SearchPhotos","useState","query","setQuery","pics","setPics","searchPhotos","e","a","preventDefault","search","photos","then","toJson","json","results","className","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","map","pic","index","key","alt","alt_description","src","urls","full","width","height","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8SAKMA,EAAW,I,OAAIC,GAAS,CAC5BC,UAAW,gDAqDEC,EAlDO,WAAO,IAAD,EAEAC,mBAAS,IAFT,mBAEnBC,EAFmB,KAEZC,EAFY,OAGFF,mBAAS,IAHP,mBAGnBG,EAHmB,KAGbC,EAHa,KAKpBC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACnBD,EAAEE,iBACFZ,EAASa,OACRC,OAAOT,GACPU,KAAKC,UACLD,MAAK,SAACE,GACLT,EAAQS,EAAKC,YANI,2CAAH,sDAWnB,OACC,oCACA,0BAAMC,UAAU,OAAOC,SAAUX,GAC3B,2BAAOU,UAAU,QAAQE,QAAQ,SAC9B,IADH,gBAIA,2BACEC,KAAK,OACLC,KAAK,QACLJ,UAAU,QACVK,YAAW,uBACXC,MAAOpB,EACPqB,SAAU,SAAChB,GAAD,OAAKJ,EAASI,EAAEiB,OAAOF,UAEnC,4BAAQH,KAAK,SAASH,UAAU,UAAhC,WAIF,yBAAKA,UAAU,aACbZ,EAAKqB,KAAI,SAACC,EAAKC,GAAN,OAAc,yBAAKC,IAAKD,EAAOX,UAAU,QAClD,yBACQA,UAAU,cACVa,IAAKH,EAAII,gBACTC,IAAKL,EAAIM,KAAKC,KACdC,MAAM,MACNC,OAAO,eCnCRC,MAZf,WACE,OACE,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,4BACA,kBAAC,EAAD,SCGYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.342ad6e0.chunk.js","sourcesContent":["import React , {useState} from 'react';\nimport Unsplash, { toJson } from \"unsplash-js\";\n\n\n\nconst unsplash = new Unsplash({\n  accessKey: \"u5tWhxrANgxRwxkz3ENmUDdAM3BDoZjXXDXpL2Vi6JU\",\n});\n\n const SearchPhotos = () => {\n\n \tconst [query, setQuery] = useState('')\n \tconst [pics, setPics] = useState([]);\n\n \tconst searchPhotos = async (e) => {\n    e.preventDefault();\n    unsplash.search\n    .photos(query)\n    .then(toJson)\n    .then((json) => {\n      setPics(json.results);\n    });\n \n  };\n\n\treturn (\n\t\t<>\n\t\t<form className=\"form\" onSubmit={searchPhotos}> \n        <label className=\"label\" htmlFor=\"query\"> \n          {\" \"}\n          ðŸ“·\n        </label>\n        <input\n          type=\"text\"\n          name=\"query\"\n          className=\"input\"\n          placeholder={`Try \"dog\" or \"apple\"`}\n          value={query}\n          onChange={(e)=>setQuery(e.target.value)}\n        />\n        <button type=\"submit\" className=\"button\">\n          Search\n        </button>\n      </form>\n      <div className=\"card-list\">\n      \t{pics.map((pic, index)=><div key={index} className=\"card\">\n      \t\t<img\n                className=\"card--image\"\n                alt={pic.alt_description}\n                src={pic.urls.full}\n                width=\"50%\"\n                height=\"50%\"\n              ></img>\n      \t</div>)}\n      </div>\n\t\t</>\n\t\t)\n}\n\nexport default SearchPhotos;","import React from 'react';\nimport './App.css';\nimport SearchPhotos from './Componenet/SearchPhotos.jsx'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <h1 className=\"title\">Search Engine for Images</h1>\n        <SearchPhotos/>\n      </div>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}